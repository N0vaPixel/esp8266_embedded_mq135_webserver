/*
  @file     MQ135_embedded_server.ino
  @author   A.Hernandez (N0vaPixel)
  @license  GNU GPLv3

  TODO : Serveur async + reconnexion automatique

  Version : 0.1.0
*/

#include "MQ135.h"
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

const int mq135Pin = A0;    // Pin de la sortie analog du MQ135
char ssid[] = "";
char pass[] = "";
bool debug = false;         // Verbosité des messages en série

// Mise en mémoire de la page HTML
const static char HTML[702] PROGMEM = {0x3c,0x21,0x44,0x4f,0x43,0x54,0x59,0x50,0x45,0x20,0x68,0x74,0x6d,0x6c,0x3e,0x20,0x3c,0x68,0x74,0x6d,0x6c,0x3e,0x20,0x3c,0x68,0x65,0x61,0x64,0x3e,0x20,0x3c,0x6d,0x65,0x74,0x61,0x20,0x63,0x68,0x61,0x72,0x73,0x65,0x74,0x3d,0x22,0x75,0x74,0x66,0x2d,0x38,0x22,0x3e,0x20,0x3c,0x73,0x63,0x72,0x69,0x70,0x74,0x20,0x73,0x72,0x63,0x3d,0x22,0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x61,0x6a,0x61,0x78,0x2e,0x67,0x6f,0x6f,0x67,0x6c,0x65,0x61,0x70,0x69,0x73,0x2e,0x63,0x6f,0x6d,0x2f,0x61,0x6a,0x61,0x78,0x2f,0x6c,0x69,0x62,0x73,0x2f,0x6a,0x71,0x75,0x65,0x72,0x79,0x2f,0x33,0x2e,0x32,0x2e,0x31,0x2f,0x6a,0x71,0x75,0x65,0x72,0x79,0x2e,0x6d,0x69,0x6e,0x2e,0x6a,0x73,0x22,0x3e,0x3c,0x2f,0x73,0x63,0x72,0x69,0x70,0x74,0x3e,0x20,0x3c,0x2f,0x68,0x65,0x61,0x64,0x3e,0x20,0x3c,0x62,0x6f,0x64,0x79,0x3e,0x20,0x3c,0x61,0x3e,0x46,0x69,0x72,0x6d,0x77,0x61,0x72,0x65,0x20,0x70,0x6f,0x75,0x72,0x20,0x4e,0x6f,0x64,0x65,0x4d,0x43,0x55,0x20,0x76,0x31,0x2e,0x30,0x20,0x2d,0x20,0x55,0x74,0x69,0x6c,0x69,0x73,0x65,0x20,0x75,0x6e,0x20,0x63,0x61,0x70,0x74,0x65,0x75,0x72,0x20,0x4d,0x51,0x2d,0x31,0x33,0x35,0x20,0x70,0x6f,0x75,0x72,0x20,0x6d,0x65,0x73,0x75,0x72,0x65,0x72,0x20,0x6c,0x61,0x20,0x63,0x6f,0x6e,0x63,0x65,0x6e,0x74,0x72,0x61,0x74,0x69,0x6f,0x6e,0x20,0x64,0x65,0x20,0x43,0x4f,0x32,0x20,0x64,0x61,0x6e,0x73,0x20,0x6c,0x27,0x61,0x74,0x6d,0x6f,0x73,0x70,0x68,0x26,0x65,0x67,0x72,0x61,0x76,0x65,0x3b,0x72,0x65,0x2e,0x20,0x3c,0x2f,0x61,0x3e,0x20,0x3c,0x62,0x72,0x20,0x5c,0x3e,0x3c,0x62,0x72,0x20,0x5c,0x3e,0x20,0x3c,0x64,0x69,0x76,0x20,0x69,0x64,0x3d,0x22,0x73,0x65,0x6e,0x73,0x6f,0x72,0x44,0x61,0x74,0x61,0x22,0x3e,0x20,0x3c,0x62,0x3e,0x3c,0x61,0x3e,0x43,0x4f,0x32,0x20,0x28,0x70,0x70,0x6d,0x29,0x20,0x3a,0x20,0x3c,0x2f,0x61,0x3e,0x20,0x3c,0x61,0x20,0x69,0x64,0x3d,0x22,0x63,0x6f,0x32,0x22,0x3e,0x57,0x61,0x69,0x74,0x69,0x6e,0x67,0x2e,0x2e,0x2e,0x3c,0x2f,0x61,0x3e,0x3c,0x2f,0x62,0x3e,0x20,0x3c,0x2f,0x64,0x69,0x76,0x3e,0x20,0x3c,0x62,0x72,0x20,0x5c,0x3e,0x20,0x3c,0x61,0x3e,0x65,0x73,0x70,0x38,0x32,0x36,0x36,0x5f,0x65,0x6d,0x62,0x65,0x64,0x64,0x65,0x64,0x5f,0x6d,0x71,0x31,0x33,0x35,0x5f,0x77,0x65,0x62,0x73,0x65,0x72,0x76,0x65,0x72,0x20,0x2d,0x20,0x76,0x30,0x2e,0x31,0x2e,0x30,0x20,0x2d,0x20,0x41,0x2e,0x48,0x65,0x72,0x6e,0x61,0x6e,0x64,0x65,0x7a,0x3c,0x2f,0x61,0x3e,0x20,0x3c,0x62,0x72,0x20,0x5c,0x3e,0x20,0x3c,0x62,0x72,0x20,0x5c,0x3e,0x20,0x3c,0x61,0x3e,0x50,0x54,0x55,0x54,0x20,0x4d,0x50,0x31,0x20,0x49,0x55,0x54,0x20,0x45,0x76,0x72,0x65,0x75,0x78,0x20,0x32,0x30,0x31,0x36,0x2f,0x32,0x30,0x31,0x37,0x3c,0x2f,0x61,0x3e,0x20,0x3c,0x73,0x63,0x72,0x69,0x70,0x74,0x3e,0x20,0x76,0x61,0x72,0x20,0x72,0x65,0x66,0x72,0x65,0x73,0x68,0x5f,0x63,0x6f,0x32,0x20,0x3d,0x20,0x73,0x65,0x74,0x49,0x6e,0x74,0x65,0x72,0x76,0x61,0x6c,0x28,0x20,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,0x6e,0x20,0x28,0x29,0x20,0x7b,0x20,0x24,0x28,0x27,0x23,0x63,0x6f,0x32,0x27,0x29,0x2e,0x6c,0x6f,0x61,0x64,0x28,0x27,0x67,0x65,0x74,0x53,0x65,0x6e,0x73,0x6f,0x72,0x44,0x61,0x74,0x61,0x27,0x29,0x3b,0x20,0x7d,0x2c,0x20,0x35,0x30,0x30,0x30,0x29,0x3b,0x20,0x3c,0x2f,0x73,0x63,0x72,0x69,0x70,0x74,0x3e,0x20,0x3c,0x2f,0x62,0x6f,0x64,0x79,0x3e,0x20,0x3c,0x2f,0x68,0x74,0x6d,0x6c,0x3e};

int loopTick = 50;
int sensorRefreshTick = 1000;
unsigned long sensorRefreshTime = 0;

float ppm = 0;
int sensorValue = 0;

ESP8266WebServer server(80); // Init d'un objet ESP8266WebServer, écoute sur le port 80

String loadSensorData() {
  if (ppm <= 0) return "unknwon";
  return String(ppm);
}

void sendHTML() {
  if(debug){
    Serial.println("Request index HTML");
  }
  server.send ( 200, "text/html", HTML);
}

void sendSensorData() {
  if(debug){
    Serial.println("Request sensorData");
  }
  server.send ( 200, "text/html", loadSensorData());
}

MQ135 gasSensor = MQ135(mq135Pin);  // Init l'objet MQ135 sur le pin du capteur

void setup()
{
  Serial.begin(74880);     // port série à 74880 bps
  Serial.println("\nPrêt");
  Serial.print("Connexion à ");
  Serial.print(ssid);

  WiFi.begin(ssid, pass);
  int conTimer = millis();
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.print("Connecté en approx ");
  Serial.print(millis() - conTimer);
  Serial.println(" ms");
  Serial.print("IP locale: ");
  Serial.println(WiFi.localIP());
  Serial.print("MAC: ");
  Serial.println(WiFi.macAddress());
  if (debug) {
    Serial.print("Sous-réseau: ");
    Serial.println(WiFi.subnetMask());
    Serial.print("Gateway: ");
    Serial.println(WiFi.gatewayIP());
    Serial.print("Cannal: ");
    Serial.println(WiFi.channel());
    Serial.print("Status: ");
    Serial.println(WiFi.status());
  }

  server.on("/", sendHTML);
  server.on("/getSensorData", sendSensorData);
  server.begin();

  float rzero = gasSensor.getRZero();
  Serial.print("\nR0: ");
  Serial.println(rzero);
}

void loop()
{
  server.handleClient();
  if (millis() - sensorRefreshTime >= sensorRefreshTick) {  // Actualisation du capteur
    ppm = gasSensor.getPPM();
    sensorValue = analogRead(mq135Pin);
    if (debug) {
      Serial.print("A0: ");
      Serial.print(sensorValue);
      Serial.print("  A0 (Volt): ");
      Serial.print(sensorValue * (5.0 / 1024.0));
      Serial.print("  ppm CO2: ");
      Serial.println(ppm);
    }
    sensorRefreshTime = millis();
  }
  delay(loopTick);
}
